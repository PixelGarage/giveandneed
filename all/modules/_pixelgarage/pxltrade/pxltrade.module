<?php
/**
* @file
* A description of what your module does.
*/

/**
 * Defines the pxltrade platform admin menu path.
 */
define('PXLTRADE_ADMIN_MENU_PATH', 'admin/pxltrade');

/**
 * Dummy email recipient address.
 */
define('PXLTRADE_DUMMY_EMAIL_RECIPIENT', 'test@test.tld');



//
// Adds webform helper functions and pre-built select lists
require_once 'includes/webform.inc';
//
// Replace BEF select control theming (checkboxes)
require_once 'includes/bef.checkbox.theme';

//
// Step 1: implements proximity item click action and AJAXify webforms (delivery and offer webforms)
require_once 'includes/proximity.action.inc';
//
// Step 2: implements webform submissions hooks (anonymous access rights)
require_once 'includes/webform.submission.inc';
//
// Step 3: alter webform submission mails (token replacements, WhatsApp)
require_once 'includes/webform.mail.inc';



/* --------------------------------------------------
 * PxlTrade session data
 * --------------------------------------------------*/
/**
 * Session wide data container.
 *
 * @return array Returns the session data array.
 */
function &pxltrade_session_data() {
  if (!isset($_SESSION['pxlTrade'])) {
    $_SESSION['pxlTrade'] = array();
  }
  return $_SESSION['pxlTrade'];
}


/* --------------------------------------------------
 * PxlTrade hook implementations
 * --------------------------------------------------*/

/**
 * Implements hook_init().
 *
 * Redirects all node pages to the defined proximity container.
 */
function pxltrade_init() {
  return; // no redirection

  // search for node/%nid routes and send them to modal dialog
  $pattern = '/^node\/\d+$/';
  if (preg_match($pattern, $_GET['q'])) {
    $param = str_replace('/', '-', $_GET['q']);
    drupal_goto('proximity-container-item/0/' . $param);
  }
}

/* --------------------------------------------------
 * Menu
 * --------------------------------------------------*/
/**
 * Define the pxltrade menu as top node of the admin menu.
 * All administration of the PxlTrade latform is added below this menu.
 * @return mixed
 */
function pxltrade_menu() {
  $items[PXLTRADE_ADMIN_MENU_PATH] = array(
    'title' => 'PixelTrade',
    'description' => 'PxlTrade - a social and ecological trading plattform.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );
  //
  // view / edit / delete webform submission by anonymous user (submission token needed)
  $items['pxltrade-form/%pxlform/submission/%pxlform_submission/anonym_view'] = array(
    'title' => 'View',
    'load arguments' => array(1),
    'page callback' => 'webform_submission_page',
    'page arguments' => array(1, 3, 'html'),
    'access callback' => 'pxltrade_anonym_submission_access',
    'access arguments' => array(1, 3, 'anonym_view'),
    'weight' => 0,
    'file path' => drupal_get_path('module', 'webform'),
    'file' => 'includes/webform.submissions.inc',
    'type' => MENU_CALLBACK,
  );
  $items['pxltrade-form/%pxlform/submission/%pxlform_submission/anonym_edit'] = array(
    'title' => 'Edit',
    'load arguments' => array(1),
    'page callback' => 'webform_submission_page',
    'page arguments' => array(1, 3, 'form'),
    'access callback' => 'pxltrade_anonym_submission_access',
    'access arguments' => array(1, 3, 'anonym_edit'),
    'weight' => 1,
    'file path' => drupal_get_path('module', 'webform'),
    'file' => 'includes/webform.submissions.inc',
    'type' => MENU_CALLBACK,
  );
  $items['pxltrade-form/%pxlform/submission/%pxlform_submission/anonym_remove'] = array(
    'title' => 'Remove',
    'load arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pxltrade_webform_submission_remove_form', 1, 3),
    'access callback' => 'pxltrade_anonym_submission_access',
    'access arguments' => array(1, 3, 'anonym_delete'),
    'weight' => 2,
    'file' => 'includes/webform.submission.inc',
    'type' => MENU_CALLBACK,
  );
  // remove all unpublished offers
  $items['pxltrade/offer/remove-all'] = array(
    'title' => 'Remove selected offers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pxltrade_offer_remove_form'),
    'access arguments' => array('View published content'),
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Menu loader callback. Load a webform node if the given nid is a webform.
 */
function pxlform_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  if (!isset($node->type) || !variable_get('webform_node_' . $node->type, FALSE)) {
    return FALSE;
  }
  return pxltrade_webform_master_form($node);
}

/**
 * Menu loader callback. Load a webform submission if the given sid is a valid.
 */
function pxlform_submission_load($sid, $nid) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $node = node_load($nid);
  $master = pxltrade_webform_master_form($node);
  $submission = webform_get_submission($master->nid, $sid);
  return empty($submission) ? FALSE : $submission;
}

/**
 * Allows to view, edit or delete submissions, if anonymous user token is correct.
 */
function pxltrade_anonym_submission_access($node, $submission, $op = 'anonym_view', $account = NULL) {
  $anonymous_access = $submission && isset($_GET['token']) && $_GET['token'] == webform_get_submission_access_token($submission);
  switch ($op) {
    case 'anonym_view':
    case 'anonym_edit':
    case 'anonym_delete':
      return $anonymous_access;
  }

  return false;
}

/**
 * Add local action on search offer view.
 *
 * @param $data
 * @param $router_item
 * @param $root_path
 */
function pxltrade_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch($root_path){
    case 'admin/content/search-offer':
      $item = menu_get_item('pxltrade/offer/remove-all');
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
  }
}

/* ---------------------------------------------------------------------
 * Form to remove all unpublished offers older than a given date.
 * ---------------------------------------------------------------------*/
/**
 * Confirmation form to delete all unpublished offers.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function pxltrade_offer_remove_form($form, $form_state) {
  $question = t('Are you sure you want to remove all offers older than the given date?');

  // add date field to select offer
  $form['pxltrade_date'] = array(
    '#type' => 'date_popup',
    '#date_timezone' => date_default_timezone(),
    '#date_format' => 'd.m.Y',
    '#date_year_range' => '-3:0',
    '#default_value' => date('Y-m-d H:i:s', strtotime('-1 year')),
    '#required' => TRUE,
  );
  $form['pxltrade_status'] = array(
    '#type' => 'radios',
    '#title' => t('Offers to be deleted'),
    '#default_value' => 'all',
    '#options' => array(
      'all' => t('All'),
      'published' => t('Published offers'),
      'unpublished' => t('Unpublished offers'),
    ),
  );

  return confirm_form($form, $question, '/', NULL, t('Remove All'), t('Cancel'));
}

function pxltrade_offer_remove_form_submit($form, $form_state) {
  $timestamp = strtotime($form_state['values']['pxltrade_date']);
  $status = $form_state['values']['pxltrade_status'];
  //
  // get all offer nodes with the given category and fulfilling all set filters
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'offer')
    ->propertyCondition('created', $timestamp, '<');
  if ($status === 'published') {
    $query->propertyCondition('status', 1);
  }
  else if ($status === 'unpublished') {
    $query->propertyCondition('status', 0);
  }
  $result = $query->execute();

  if (isset($result['node'])) {
    // get nodes and delete it
    try {
      node_delete_multiple(array_keys($result['node']));
    }
    catch (Exception $e) {
      $error_msg = t('The offers could not be deleted due to a server error: @err', array('@err' => $e->getMessage()));
      drupal_set_message($error_msg, 'error');
      watchdog('pxlTrade', $error_msg, array(), WATCHDOG_ERROR);
    }
  }
}

/* --------------------------------------------------
 * Themes
 * --------------------------------------------------*/
/**
 * Implements hook_theme().
 */
function pxltrade_theme() {
  return array(
    'pxltrade_bs_carousel' => array(
      'variables' => array(
        'interval' => '10000',
        'pause' => 0,
        'wrap' => 0,
        'keyboard' => 0,
        'indicators' => 1,
        'navigation' => 1,
        'id' => '',
        'items' => array(),
      ),
      'file' => 'templates/pxltrade-bs-carousel.vars.php',
      'template' => 'templates/pxltrade-bs-carousel',
    ),
    'pxltrade_delivery_confirmation' => array(
      'variables' => array(
        'node' => null,
        'sid' => null,
        'status' => 'success',
      ),
      'file' => 'templates/pxltrade-delivery-confirmation.vars.php',
      'template' => 'templates/pxltrade-delivery-confirmation',
    ),
  );
}

/* --------------------------------------------------
 * Preprocess offer address field (hide sensitive data)
 * --------------------------------------------------*/
/**
 * Preprocess address field.
 *
 * The address field contains sensitive information about the supplier.
 * Hide all sensitive information when an offer is displayed.
 */
function pxltrade_preprocess_field(&$vars) {
  $element = $vars['element'];

  if($element['#entity_type'] == 'node' && $element['#bundle'] == 'offer' && $element['#field_name'] == 'field_address') {
    // hide sensitive address information (only name showed)
    foreach ($vars['items'] as $delta => &$item) {
      hide($item['street_block']);
      hide($item['locality_block']);
    }
  }
}


